"use client"; // ‡∏ö‡∏≠‡∏Å Next.js ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Client-side React (‡πÄ‡∏ä‡πà‡∏ô useState, useRef ‡πÑ‡∏î‡πâ)

import Image from "next/image";
import React, { useRef, useState } from "react";

// üß© ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® props ‡∏ó‡∏µ‡πà component ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏±‡∏ö (‡∏≠‡∏≤‡∏à‡∏°‡∏µ callback ‡∏ä‡∏∑‡πà‡∏≠ onFileChange)
interface DragAndDropProps {
  onFileChange?: (file: File) => void;
}

// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Component
const DragAndDrop: React.FC<DragAndDropProps> = ({ onFileChange }) => {
  // üì¶ ‡πÉ‡∏ä‡πâ useRef ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å input[type="file"] ‡πÅ‡∏ö‡∏ö‡∏ã‡πà‡∏≠‡∏ô
  const fileInputRef = useRef<HTMLInputElement | null>(null);

  // üéØ ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  const [uploadedFileName, setUploadedFileName] = useState<string | null>(null);

  // ‚ùå ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const [error, setError] = useState<string | null>(null);

  // üñº ‡πÄ‡∏Å‡πá‡∏ö URL preview ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);

  // üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const validateFile = (file: File) => {
    if (file.size > 10 * 1024 * 1024) {
      setError("File size exceeds the 10MB limit.");
      return false;
    }

    const validTypes = ["image/jpeg", "image/png"];
    if (!validTypes.includes(file.type)) {
      setError("Only JPG or PNG files are allowed.");
      return false;
    }

    setError(null); // ‚úî ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô
    return true;
  };

  // üì• handle drop (‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á)
  const handleDrop = (e: React.DragEvent<HTMLDivElement>): void => {
    e.preventDefault();
    const file = e.dataTransfer.files?.[0];
    if (file && validateFile(file)) {
      setUploadedFileName(file.name);
      setPreviewUrl(URL.createObjectURL(file)); // üñº ‡∏™‡∏£‡πâ‡∏≤‡∏á preview image URL
      onFileChange?.(file); // üîÅ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á parent component
      e.dataTransfer.clearData();
    }
  };

  // üñ± ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà upload ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î file picker
  const handleClick = (): void => {
    fileInputRef.current?.click();
  };

  // üìÇ handle file ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ drag)
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    const file = e.target.files?.[0];
    if (file && validateFile(file)) {
      setUploadedFileName(file.name);
      setPreviewUrl(URL.createObjectURL(file));
      onFileChange?.(file);
    }
  };

  return (
    <div>
      {/* üîñ Label ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß */}
      <label className="text-white font-semibold text-lg mb-4">
        Upload Avatar
      </label>

      {/* üß≤ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å */}
      <div
        className="flex flex-col mt-2 w-100 h-60 border-2 border-dashed border-gray-500 rounded-2xl bg-gray-600/20
        items-center justify-center text-gray-400 hover:border-blue-500 hover:text-white cursor-pointer transition-colors relative overflow-hidden"
        onDragOver={(e) => e.preventDefault()}
        onDrop={handleDrop}
        onClick={!previewUrl ? handleClick : undefined} // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ preview
      >
        {previewUrl ? (
          <>
            {/* üñº ‡πÅ‡∏™‡∏î‡∏á preview ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
            <div className="flex items-center justify-center w-full h-full">
              <img
                src={previewUrl}
                alt="Preview"
                className="object-cover w-32 h-32 rounded-sm border-2 border-white shadow"
              />
            </div>
            {/* üîÑ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ */}
            <button
              onClick={handleClick}
              className="absolute bottom-2 right-2 bg-white text-black text-xs px-3 py-1 rounded-md shadow hover:bg-blue-100"
            >
              Change Image
            </button>
          </>
        ) : (
          <>
            {/* üì• Icon ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° drag/drop */}
            <Image
              src="/assets/images/icon-upload.svg"
              alt="icon upload"
              width={40}
              height={40}
              className="w-10"
            />
            <span>Drag & Drop or Click to Upload</span>
          </>
        )}
      </div>

      {/* üìÅ input ‡πÅ‡∏ö‡∏ö‡∏ã‡πà‡∏≠‡∏ô */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
        accept="image/*"
      />

      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß */}
      {uploadedFileName && !error && (
        <p className="mt-4 text-white text-sm">
          Uploaded: <span className="text-blue-400">{uploadedFileName}</span>
        </p>
      )}

      {/* üßæ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ error) */}
      {!uploadedFileName && !error && (
        <div className="flex flex-row mt-2 gap-2">
          <Image
            src="/assets/images/icon-info.svg"
            alt="icon info"
            width={20}
            height={20}
            className="w-5"
          />
          <p className="text-white text-sm text-center">
            Upload your photo (JPG or PNG, max size: 10MB)
          </p>
        </div>
      )}

      {/* ‚ùå ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
      {error && (
        <p className="mt-4 text-red-500 text-sm">
          <span>{error}</span>
        </p>
      )}
    </div>
  );
};

export default DragAndDrop;
